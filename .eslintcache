[{"/Users/isaachughes/Work/Codenation/restapi_frontend/src/index.js":"1","/Users/isaachughes/Work/Codenation/restapi_frontend/src/reportWebVitals.js":"2","/Users/isaachughes/Work/Codenation/restapi_frontend/src/App.js":"3","/Users/isaachughes/Work/Codenation/restapi_frontend/src/components/Posts.js":"4","/Users/isaachughes/Work/Codenation/restapi_frontend/src/components/Input.js":"5"},{"size":500,"mtime":1612259419022,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1612259419026,"results":"8","hashOfConfig":"7"},{"size":280,"mtime":1612348435817,"results":"9","hashOfConfig":"7"},{"size":1609,"mtime":1612282480817,"results":"10","hashOfConfig":"7"},{"size":2469,"mtime":1612350218178,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"lyyg7n",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/isaachughes/Work/Codenation/restapi_frontend/src/index.js",[],["24","25"],"/Users/isaachughes/Work/Codenation/restapi_frontend/src/reportWebVitals.js",[],"/Users/isaachughes/Work/Codenation/restapi_frontend/src/App.js",[],"/Users/isaachughes/Work/Codenation/restapi_frontend/src/components/Posts.js",[],"/Users/isaachughes/Work/Codenation/restapi_frontend/src/components/Input.js",["26","27","28"],"import React, { useState, useEffect } from \"react\";\n\nconst InputField = () => {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(true);\n    // const [items, setItems] = useState([]);\n    const [inputTitle, updateInputTitle] = useState(\"\")\n    const [inputContent, updateInputContent] = useState(\"\")\n    const [inputUserID, updateInputUserID] = useState(\"\")\n\n    const inputTitleUpdate = (event) => {\n        let val = event.target.value;\n        updateInputTitle(val)\n      }\n\n    const inputContentUpdate = (event) => {\n        let val = event.target.value;\n        updateInputContent(val)\n      }\n\n    const inputIDUpdate = (event) => {\n        let val = event.target.value;\n        updateInputUserID(val)\n      }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        // let x = inputTitle\n        // let y = inputContent\n        // let z = inputUserID\n        // let jsonString = {\"author\": `${z}`, \"title\": `${x}`, \"content\": `${y}`}\n        // JSON.stringify(jsonString)\n        // console.log(jsonString)\n        savePost()\n    }\n\n\n    const savePost = async () => {\n        try {\n          const response = await fetch(`http://localhost:5000/posts/${inputUserID}`,\n          {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({author: inputUserID, title: inputTitle, content: inputContent})\n          });\n          const data = await response.json();\n          console.log(data)\n        } catch (error) {\n          console.log(\"I didn't post\")\n          console.log(error)\n        }\n      }\n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        // add cool loading thing\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <div className=\"input\">\n               <form onSubmit={handleSubmit}>\n                   <input name=\"title\" type=\"text\" placeholder=\"Title\" autoComplete=\"off\" onChange={inputTitleUpdate}></input>\n                   <input name=\"content\" type=\"text\" placeholder=\"Content\" autoComplete=\"off\" onChange={inputContentUpdate}></input>\n                   <input name=\"inputField\" type=\"text\" placeholder=\"User Id\" autoComplete=\"off\" onChange={inputIDUpdate}></input>\n                   <button className=\"submitButton\" type=\"submit\">Post</button>\n               </form>\n            </div>\n        );\n    }   \n}\n\nexport default InputField;",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":27,"nodeType":"35","messageId":"36","endLine":1,"endColumn":36},{"ruleId":"33","severity":1,"message":"37","line":4,"column":19,"nodeType":"35","messageId":"36","endLine":4,"endColumn":27},{"ruleId":"33","severity":1,"message":"38","line":5,"column":22,"nodeType":"35","messageId":"36","endLine":5,"endColumn":33},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setError' is assigned a value but never used.","'setIsLoaded' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]